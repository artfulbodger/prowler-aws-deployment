# SPDX-License-Identifier: MIT-0
AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates the S3 resources for the Prowler inetgration, and configures Security Hub in this Region as the Aggreation account."
Parameters:
  ProwlerExecutionOrgID:
    Type: String
    Description: >
      Enter AWS Organizations ID.
      This is used to restrict permissions to least privilege.
    AllowedPattern: ^o-[a-z0-9]{10,32}$
    ConstraintDescription: The Org Id must be a 12 character string starting with o- and followed by 10 lower case alphanumeric characters.
  S3Prefix:
    Type: String
    Description: >
      Enter S3 Bucket Name Prefix (in lowercase).
      Bucket will be named: prefix-awsaccount-awsregion (i.e., prowler-123456789012-eu-east-2)
    AllowedPattern: ^[a-z0-9][a-z0-9-]{1,33}[a-z0-9]$
    ConstraintDescription: >
      Max 35 characters, as "-awsaccount-awsregion" will be added, and max name is 63 characters.
      Can't start or end with dash.  Can use numbers and lowercase letters.
    Default: prowler
Resources:
  ProwlerS3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub ${S3Prefix}-${AWS::AccountId}-${AWS::Region}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      LifecycleConfiguration:
        Rules:
          - Id: DeleteRawFiles
            Prefix: raw/firehose/
            Status: Enabled
            ExpirationInDays: 7
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: App
          Value: Prowler
  ProwlerS3BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref ProwlerS3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Principal: "*"
            Action: "s3:GetObject"
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${ProwlerS3Bucket}/*
            Effect: "Allow"
            Condition:
              StringEquals:
                aws:PrincipalOrgID: !Ref ProwlerExecutionOrgID
  LambdaFunctionEnableSHXRAggregation:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          # SPDX-License-Identifier: MIT-0
          import sys,json,boto3,time,os
          import cfnresponse
          from botocore.exceptions import ClientError

          def lambda_handler(event, context):
            print('this is the event ' + json.dumps(event))
            StackName = event['StackId']
            LogicalResourceId = event['LogicalResourceId']
            UniqueId = event['RequestId']
            props = event['ResourceProperties']
            if (event['RequestType'] == 'Create' or event['RequestType'] == 'Update'):
              try:                
                region = os.environ['AWS_REGION']
                securityhub_client = boto3.client('securityhub', region_name=region)
                response = securityhub_client.create_finding_aggregator(RegionLinkingMode='ALL_REGIONS')
                print(response)
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {},"LambdaFunctionEnableSHXRAggregationInvoke")
              except Exception as ex:
                print(ex)
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
            else:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
      Handler: index.lambda_handler
      Role: !GetAtt IAMRoleEnableSHXRAggregation.Arn
      Runtime: python3.8
      FunctionName: LambdaFunctionEnableSHXRAggregation
      MemorySize: 256
      Timeout: 300
      Description: Lambda that enables SecurityHub Cross-region Aggregation
  IAMRoleEnableSHXRAggregation:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: IAMRoleEnableSHXRAggregation
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - securityhub:CreateFindingAggregator
                  - securityhub:GetFindingAggregator
                  - securityhub:ListFindingAggregators
                  - securityhub:UpdateFindingAggregator
                Resource:
                  - !Sub "arn:aws:securityhub:${AWS::Region}:${AWS::AccountId}:/findingAggregator/create"
  LambdaFunctionEnableSHXRAggregationInvoke:
    Type: AWS::CloudFormation::CustomResource
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt LambdaFunctionEnableSHXRAggregation.Arn

  SecurityHubCloudWatchEvent:
    DependsOn:
      - SecurityHubFirehose
    Type: "AWS::Events::Rule"
    Properties:
      Description: Exports SecurityHub findings to S3
      State: ENABLED
      EventPattern:
        source:
          - aws.securityhub
      Targets:
        - Arn: !GetAtt SecurityHubFirehose.Arn
          Id: FirehoseStream
          RoleArn: !GetAtt SecurityHubLogDeliveryRole.Arn

  SecurityHubLogDeliveryRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: "AllowSecurityHubLogDelivery"
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: securityhub_log_delivery_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "firehose:PutRecord"
                  - "firehose:PutRecordBatch"
                Resource:
                  - !GetAtt SecurityHubFirehose.Arn
      Tags:
        - Key: App
          Value: Prowler

  LambdaFunctionKdfTransformation:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          # SPDX-License-Identifier: MIT-0
          import base64
          def lambda_handler(event, context):
              output = []
              for record in event['records']:
                  print(record['recordId'])
                  payload = base64.b64decode(record['data']).decode('utf-8')
                  print('decoded payload: ' + str(payload))
                  # Do custom processing on the payload here
                  payload = str(payload) + '\n'
                  output_record = {
                      'recordId': record['recordId'],
                      'result': 'Ok',
                      'data': base64.b64encode(payload.encode('utf-8'))
                  }
                  output.append(output_record)
              print('Successfully processed {} records.'.format(len(event['records'])))
              return {'records': output}
      Handler: index.lambda_handler
      Role: !GetAtt IAMRoleLambdaKdfTransformation.Arn
      Runtime: python3.8
      FunctionName: LambdaFunctionKdfTransformation
      MemorySize: 128
      Timeout: 300
      Description: Lambda for Kdf Transformation
      Tags:
        - Key: App
          Value: Prowler

  IAMRoleLambdaKdfTransformation:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Tags:
        - Key: App
          Value: Prowler

  SecurityHubFirehose:
    DependsOn:
      - SecurityHubFirehoseDeliveryPolicy
      - ProwlerS3Bucket
    Type: "AWS::KinesisFirehose::DeliveryStream"
    Properties:
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        BucketARN: !Sub arn:${AWS::Partition}:s3:::${ProwlerS3Bucket}
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 5
        ProcessingConfiguration:
          Enabled: true
          Processors:
            - Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt LambdaFunctionKdfTransformation.Arn
              Type: Lambda
        CompressionFormat: UNCOMPRESSED
        Prefix: raw/firehose/!{timestamp:yyyy}/!{timestamp:MM}/!{timestamp:dd}/
        ErrorOutputPrefix: raw/errors/!{firehose:error-output-type}/!{timestamp:yyyy/MM/}
        RoleARN: !GetAtt FirehoseDeliveryRole.Arn
      Tags:
        - Key: App
          Value: Prowler

  FirehoseDeliveryRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: "AllowFirehoseDelivery"
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: "sts:AssumeRole"
            Condition:
              StringEquals:
                "sts:ExternalId": !Ref "AWS::AccountId"
      Tags:
        - Key: App
          Value: Prowler

  SecurityHubFirehoseDeliveryPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "s3:AbortMultipartUpload"
              - "s3:GetBucketLocation"
              - "s3:GetObject"
              - "s3:ListBucket"
              - "s3:ListBucketMultipartUploads"
              - "s3:PutObject"
              - "s3:DeleteObject"
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${ProwlerS3Bucket}
              - !Sub arn:${AWS::Partition}:s3:::${ProwlerS3Bucket}/*
          - Effect: Allow
            Action:
              - "lambda:InvokeFunction"
            Resource:
              - !GetAtt LambdaFunctionKdfTransformation.Arn
      Roles:
        - !Ref FirehoseDeliveryRole
